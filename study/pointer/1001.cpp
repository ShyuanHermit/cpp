/*************************************************************************
    > File Name: /home/lvshy/cpp/study/pointer/1001.cpp
    > Author: lvshy
    > Mail: Shyuan231026nwpu@outlook.com 
    > Created Time: Wed Nov 15 15:33:38 2023
 ************************************************************************/

#include<bits/stdc++.h>

using namespace std;

int main(){

	int a=5;
	int *p=&a;
	int **q=&p;
	int ***m=&q;

	cout<<a<<*p<<**q<<***m<<endl;//本行是在针对地址内的内容输出；下面是针对他们在其中的对应地址。
	cout<<p<<endl;
	cout<<q<<endl;
	cout<<m<<endl;

return 0;
}
/*补充一下：由于本人为非计算机专业，所以在这里为大家没有提供运算的一些本源逻辑。
当然，也有可能是笔者的实力不足，并没有了解。

指针就是pointer，他就是C语言的灵魂所在，是我们所希望攀爬的一座高峰。
而在所有部分中，我又对指针最是知之甚少。
也就是说，我们希望的是系统学习pointer。

1：指针的定义/声明。
格式如下：
type *name;
如，我们def:	int lgz; 指示了一个变量。
		int *lvshy; 指示了一个整型指针。
		*lvshy=&lgz ;指示了指针储存了变量的地址。
！！！重点来了，由于指针是储存了一个地址，我们发现，在读取时，我们从计算机本源逻辑上发现：
有两种读取行为，即读取地址本身（即计算机分配的内存）还是地址所储存的东西。
分别通过 cout<<lvshy;和cout<<*lvshy;来实现。
值得一提，在C语言中，我们printf是"p = %d"的格式，其中%d只是举例。

特别注意，由于指针针对了储存地址，实际上，我们不可以直接的对一个指针赋值。

2：进阶，对于**p和***p的认识。可以这样说：
			int *中存放的是int类型数据的地址

			int **中存放的是int类型数据的地址的地址
是不是有些绕？别急，我们来理解一下。
	a<----p<----q;（认为有这样一个指向关系）；
	要去储存一个变量的地址，就需要分配内存。即是说，我们可以看出来要储存，那它同样存在地址。
那是不是int ***是一样的呢？确实如此。

写到这里，我们的本节就可以先暂停了，后续的内容还是非常烧脑的。
*/
